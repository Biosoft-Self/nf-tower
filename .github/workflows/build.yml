name: Tower continuous build
on: [push]
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Tower build
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      fail-fast: false

    steps:
     - name: Space cleanup and Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Environment
      run: env | sort 

    - name: Checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: '8.0.222' 
        architecture: x64

    - name: Tests
      run: ./gradlew clean test

    - name: Tests MySql
      run: ./gradlew clean build
      env:
        MICRONAUT_ENVIRONMENTS: mysql

    - name: Build backend
      run: ./gradlew tower-backend:jibDockerBuild

    - name: Build frontend
      run: docker build -t tower-web:latest tower-web

    - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
    - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
